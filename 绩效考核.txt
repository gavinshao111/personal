2016年度考核

1. 搭建流媒体服务器EasyDarwin
部署EasyDarwin开发环境，编译运行EasyDarwin，vlc客户端可以观看正在推流的视频。			从github上下载EasyDarwin源码，编译运行，启动推流程序开始推流，然后vlc播放视频成功。

2. EasyDarwin实现先拉后推模式播放视频
客户端不发送MQ，只需要按照RTSP标准，发送RTSP请求给EasyDarwin，实现视频播放。
阅读研究EasyDarwin源码，理解其工作原理与关键技术，分析项目需求，制定EasyDarwin先拉后推方案：为EasyDarwin添加MQ模块；在EasyDarwin端实时过滤分析RTSP请求，识别到App播放请求时，阻塞App请求，同时发送MQ给车机通知其开始推流；在EasyDarwin收到车机推流后，继续处理App请求，转发车机的推流视频数据，播放成功。经过自身模拟调试与车机端App端反复联调，不断修复bug与优化播放流程，最后结果播放成功率高，满足项目要求。

3. Android端实现RTSP视频播放
Android端成功解析EasyDarwin视频数据并成功播放
与EasyDarwin服务器建立连接，实现RTSP协议，实现RTP协议，解析EasyDarwin发送过来的RTP负载数据，得到nal包，探究h264视频数据格式，然后按格式组成可播放的h264数据流，调用硬解码接口实现Android端视频播放。


17年半年度

1. 	车联网流媒体项目开发
维护服务端功能。实现Android车机端视频推流程序替代ffmpeg的方案以提高稳定性。
车机端：原有ffmpeg推流方案经常出现内部错误，导致推流不稳定，经常播放失败，基于这个问题，分析ffmpeg视频推流方案，理解ffmpeg方案下的视频推流过程，RTSP交互过程，抓包分析RTP数据包，实现RTSP、RTP协议，实现自己的车机端推流程序，经与服务器、app端联调，最后结果视频播放成功率高，播放过程稳定，解决车机端推流不稳定的问题。服务端：与车机、app联调，实现录像暂停、进度条拖动等功能，优化原有功能，修复bug。
	
2. 车辆远程管理国标协议开发
实现国标企业平台，通过车辆符合性、平台符合性检测。
阅读车辆远程管理国标文件，与同事、领导讨论制定车辆远程管理方案，实现企业平台端功能。整理国标数据与公司现有现有信号对比，转换单位。与车机端制定通信协议。编写模拟车机端、模拟公共平台进行针对企业平台的单元测试。由于国标表述模糊，缺少详细资料，初期对国标要求认识不足，导致需求频繁变更，方案也随之变更，企业平台多次重构。近期基本完成企业平台开发，部署后与车机端联调完成，准备进行与中汽研远程公共平台的联调。

3. 零云平台开发
零云平台后台接口开发。
完成can数据上传服务器，完成车辆抓拍相关接口，统计车辆驾驶评价点，制定驾驶评分方案，完成单体极值、单体电压接口，完成车辆故障解析并生成故障单接口。

17年度

1. 车联网流媒体项目开发
维护服务端功能。实现Android车机端视频推流程序替代ffmpeg的方案以提高稳定性。	Android车机端：分析ffmpeg视频推流方案，理解ffmpeg方案下的视频推流过程，RTSP交互过程，抓包分析RTP数据包，实现RTSP、RTP协议，实现自己的车机端推流程序，替换ffmpeg推流方案以解决车机端推流不稳定的问题，经联调，视频播放成功率高，播放过程稳定。
EasyDarwin服务端：与车机、app联调，实现录像暂停、进度条拖动，切换摄像头，等功能，优化原有功能，修复bug。增加自动重启任务提高可用性。iOS客户端：根据之前Android RTSP视频播放客户端开发经验，协助iOS开发实现RTSP客户端，以替换原来的ffmpeg方案，提高iOS客户端视频播放稳定性。

2. 车辆远程管理国标协议开发
实现国标企业平台，通过车辆符合性、平台符合性检测。	根据车辆远程管理国标文件，实现国标企业平台，与上汽研远程服务平台完成联调，与同事开发的车机端与公共平台端联调，完善协议与流程，优化逻辑和日志系统，解决若干bug，内部联调已通过平台符合性测试。

3. 零云平台开发
零云平台后台接口开发。
完成can数据上传服务器，完成车辆抓拍相关接口，统计车辆驾驶评价点，制定驾驶评分方案，完成单体极值、单体电压接口，完成车辆故障解析并生成故障单，app用户头像上传更新等接口。

4. 接入乐橙音视频传输方案
设备端开发乐橙设备sdk，app端开发乐橙app api，实现使用乐橙平台传输车机端到app端的视频播放，语音对讲功能
开发尚未完成。由于乐橙设备端sdk本身没有经过严格测试，因此开发使用过程中遇到非常多的sdk自身的bug
1. 测试研究协助乐橙开发人员解决乐橙sdk arm平台版本无法在Android上加载的问题
2. 测试研究协助乐橙开发人员解决设备端与app对讲，双方收到音频无法播放的bug
3. 学习JNI技术，二次开发乐橙sdk，将sdk的原生c++动态库封装成java服务的形式，供车机端Android应用使用。
4. 学习AAC、g711a音频编解码技术，实现Android设备端实时录音并通过乐橙sdk发送给app端实时播放

